#     p.adjust.method = "bonferroni"
#   )
#
# task_df %>%
#   pairwise_t_test(
#     average_mt ~ order,
#     p.adjust.method = "bonferroni"
#   )
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
get_anova_table(res.aov)
######################### SIG: Pairwise comparisons for trial levels #########################
pwc <- task_df %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ##### kruskal-wallis test
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
# ######################### SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# pwc <- task_df %>%
#   group_by(condition) %>%
#   pairwise_t_test(average_mt ~ order, p.adjust.method = "bonferroni")
# pwc
#
# ######################### NON-SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# task_df %>%
#   pairwise_t_test(
#     average_mt ~ autonomy, paired = TRUE,
#     p.adjust.method = "bonferroni"
#   )
#
# task_df %>%
#   pairwise_t_test(
#     average_mt ~ order,
#     p.adjust.method = "bonferroni"
#   )
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
get_anova_table(res.aov)
######################### SIG: Pairwise comparisons for trial levels #########################
pwc <- task_df %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
# ##### kruskal-wallis test
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
# ######################### SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# pwc <- task_df %>%
#   group_by(condition) %>%
#   pairwise_t_test(average_mt ~ order, p.adjust.method = "bonferroni")
# pwc
#
# ######################### NON-SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# task_df %>%
#   pairwise_t_test(
#     average_mt ~ autonomy, paired = TRUE,
#     p.adjust.method = "bonferroni"
#   )
#
# task_df %>%
#   pairwise_t_test(
#     average_mt ~ order,
#     p.adjust.method = "bonferroni"
#   )
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
get_anova_table(res.aov)
######################### SIG: Pairwise comparisons for trial levels #########################
pwc <- task_df %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ##### kruskal-wallis test
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
# ######################### SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# pwc <- task_df %>%
#   group_by(condition) %>%
#   pairwise_t_test(average_mt ~ order, p.adjust.method = "bonferroni")
# pwc
#
# ######################### NON-SIG 2-WAY INTER: Pairwise comparisons between group levels #########################
# task_df %>%
#   pairwise_t_test(
#     average_mt ~ autonomy, paired = TRUE,
#     p.adjust.method = "bonferroni"
#   )
#
# task_df %>%
#   pairwise_t_test(
#     average_mt ~ order,
#     p.adjust.method = "bonferroni"
#   )
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
get_anova_table(res.aov)
######################### SIG: Pairwise comparisons for trial levels #########################
pwc <- task_df %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
###### kruskal-wallis test ######
res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
res.kruskal
task_df %>% kruskal_effsize(average_mt ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
get_anova_table(res.aov)
######################### SIG: Pairwise comparisons for trial levels #########################
pwc <- task_df %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ###### kruskal-wallis test ######
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
get_anova_table(res.aov)
######################### SIG: Pairwise comparisons for trial levels #########################
pwc <- task_df %>%
group_by(condition) %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ###### kruskal-wallis test ######
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
get_anova_table(res.aov)
######################### SIG: Pairwise comparisons between trials for each condition #########################
pwc <- task_df %>%
group_by(condition) %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
######################### SIG: Pairwise comparisons between conditions for each trial #########################
pwc <- task_df %>%
group_by(trial) %>%
pairwise_t_test(
average_mt ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ###### kruskal-wallis test ######
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
get_anova_table(res.aov)
######################### SIG: Pairwise comparisons between trials for each condition #########################
pwc <- task_df %>%
group_by(condition) %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
######################### NON-SIG: Pairwise comparisons between conditions for each trial #########################
pwc <- task_df %>%
group_by(trial) %>%
pairwise_t_test(
average_mt ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ###### kruskal-wallis test ######
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
tlx_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
tlx_df %>%
group_by(condition) %>%
get_summary_stats(difficulty, type = "mean_sd")
tlx_dims_df <- data.frame(tlx_df$tlx_mental, tlx_df$tlx_physical, tlx_df$tlx_hurried,
tlx_df$tlx_successful, tlx_df$tlx_hard, tlx_df$tlx_insecure)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
cronbach.alpha(tlx_dims_df, CI=TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
form_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
form_df %>%
group_by(condition) %>%
get_summary_stats(difficulty, type = "mean_sd")
tlx_dims_df <- data.frame(form_df$tlx_mental, form_df$tlx_physical, form_df$tlx_hurried,
form_df$tlx_successful, form_df$tlx_hard, form_df$tlx_insecure)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
cronbach.alpha(tlx_dims_df, CI=TRUE)
View(form_df)
View(form_df)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
form_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
form_df %>%
group_by(condition) %>%
get_summary_stats(difficulty, type = "mean_sd")
bxp <- ggboxplot(form_df, x = "condition", y = "difficulty", add = "jitter", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "difficulty.png")
######################### check for outliers #########################
form_df %>%
group_by(condition) %>%
identify_outliers(difficulty)
######################### check normality #########################
form_df %>%
group_by(condition) %>%
shapiro_test(difficulty)
ggqqplot(form_df, "difficulty", facet.by = "condition")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = form_df, dv = difficulty, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- form_df %>%
pairwise_t_test(
difficulty ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ##### kruskal-wallis test
# res.kruskal <- form_df %>% kruskal_test(difficulty ~ condition)
# res.kruskal
#
# form_df %>% kruskal_effsize(difficulty ~ condition)
View(form_df)
View(form_df)
knitr::opts_chunk$set(echo = TRUE)
######################### get mean and sd (or se) #########################
form_df %>%
group_by(condition) %>%
get_summary_stats(tlx_ave, type = "mean_sd")
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
form_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
form_df %>%
group_by(condition) %>%
get_summary_stats(tlx_ave, type = "mean_sd")
bxp <- ggboxplot(form_df, x = "condition", y = "tlx_ave", add = "jitter", order=c("A", "B", "C", "D"))
bxp
# ggexport(bxp, filename = "tlx_ave.png")
######################### check for outliers #########################
form_df %>%
group_by(condition) %>%
identify_outliers(tlx_ave)
######################### check normality #########################
form_df %>%
group_by(condition) %>%
shapiro_test(tlx_ave)
ggqqplot(form_df, "tlx_ave", facet.by = "condition")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = form_df, dv = tlx_ave, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- form_df %>%
pairwise_t_test(
tlx_ave ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ##### kruskal-wallis test
# res.kruskal <- form_df %>% kruskal_test(tlx_ave ~ condition)
# res.kruskal
#
# form_df %>% kruskal_effsize(tlx_ave ~ condition)
View(form_df)
View(form_df)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
form_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
form_df %>%
group_by(condition) %>%
get_summary_stats(tlx_ave, type = "mean_sd")
tlx_dims_df <- data.frame(tlx_df$tlx_mental, tlx_df$tlx_physical, tlx_df$tlx_hurried,
tlx_df$tlx_successful, tlx_df$tlx_hard, tlx_df$tlx_insecure)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
cronbach.alpha(tlx_dims_df, CI=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
emb_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
emb_df %>%
group_by(condition) %>%
get_summary_stats(emb_ave, type = "mean_sd")
emb_dims_df <- data.frame(emb_df$emb1, emb_df$emb2, emb_df$emb3,
emb_df$emb4, emb_df$emb5, emb_df$emb6)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
cronbach.alpha(emb_dims_df, CI=TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
form_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
form_df %>%
group_by(condition) %>%
get_summary_stats(emb_ave, type = "mean_sd")
emb_dims_df <- data.frame(form_df$emb1, form_df$emb2, form_df$emb3,
form_df$emb4, form_df$emb5, form_df$emb6)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
cronbach.alpha(emb_dims_df, CI=TRUE)
View(form_df)
View(form_df)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
form_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
form_df %>%
group_by(condition) %>%
get_summary_stats(emb_ave, type = "mean_sd")
emb_dims_df <- data.frame(form_df$emb_1, form_df$emb_2, form_df$emb_3,
form_df$emb_4, form_df$emb_5, form_df$emb_6)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
cronbach.alpha(emb_dims_df, CI=TRUE)
###### embodiment 1 ######
bxp <- ggboxplot(form_df, x = "condition", y = "emb_1", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment1.png")
###### embodiment 2 ######
bxp <- ggboxplot(form_df, x = "condition", y = "emb_2", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment2.png")
###### embodiment 3 ######
bxp <- ggboxplot(form_df, x = "condition", y = "emb_3", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment3.png")
###### embodiment 4 ######
bxp <- ggboxplot(form_df, x = "condition", y = "emb_4", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment4.png")
###### embodiment 5 ######
bxp <- ggboxplot(form_df, x = "condition", y = "emb_5", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment5.png")
###### embodiment 6 ######
bxp <- ggboxplot(form_df, x = "condition", y = "emb_6", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment6.png")
###### ownership average ######
bxp <- ggboxplot(form_df, x = "condition", y = "owner_ave", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "ownership.png")
###### agency average ######
bxp <- ggboxplot(form_df, x = "condition", y = "agency_ave", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "agency.png")
###### embodiment average ######
bxp <- ggboxplot(form_df, x = "condition", y = "emb_ave", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment_ave.png")
# ###### embodiment 1 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_1", add = "point", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment1.png")
#
# ###### embodiment 2 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_2", add = "point", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment2.png")
#
# ###### embodiment 3 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_3", add = "point", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment3.png")
#
# ###### embodiment 4 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_4", add = "point", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment4.png")
#
# ###### embodiment 5 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_5", add = "point", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment5.png")
#
# ###### embodiment 6 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_6", add = "point", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment6.png")
# ###### ownership average ######
# bxp <- ggboxplot(form_df, x = "condition", y = "owner_ave", add = "point", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "ownership.png")
#
# ###### agency average ######
# bxp <- ggboxplot(form_df, x = "condition", y = "agency_ave", add = "point", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "agency.png")
###### embodiment average ######
bxp <- ggboxplot(form_df, x = "condition", y = "emb_ave", add = "point", order = c("A", "B", "C", "D"))
bxp
# ggexport(bxp, filename = "embodiment_ave.png")
# ###### embodiment 1 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_1", add = "jitter", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment1.png")
#
# ###### embodiment 2 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_2", add = "jitter", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment2.png")
#
# ###### embodiment 3 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_3", add = "jitter", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment3.png")
#
# ###### embodiment 4 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_4", add = "jitter", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment4.png")
#
# ###### embodiment 5 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_5", add = "jitter", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment5.png")
#
# ###### embodiment 6 ######
# bxp <- ggboxplot(form_df, x = "condition", y = "emb_6", add = "jitter", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "embodiment6.png")
# ###### ownership average ######
# bxp <- ggboxplot(form_df, x = "condition", y = "owner_ave", add = "jitter", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "ownership.png")
#
# ###### agency average ######
# bxp <- ggboxplot(form_df, x = "condition", y = "agency_ave", add = "jitter", order = c("A", "B", "C", "D"))
# bxp
# # ggexport(bxp, filename = "agency.png")
###### embodiment average ######
bxp <- ggboxplot(form_df, x = "condition", y = "emb_ave", add = "jitter", order = c("A", "B", "C", "D"))
bxp
# ggexport(bxp, filename = "embodiment_ave.png")
######################### check for outliers #########################
form_df %>%
group_by(condition) %>%
identify_outliers(emb_ave)
######################### check normality #########################
form_df %>%
group_by(condition) %>%
shapiro_test(emb_ave)
ggqqplot(form_df, "emb_ave", facet.by = "condition")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = form_df, dv = emb_ave, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- form_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
# ##### kruskal-wallis test
# res.kruskal <- tlx_df %>% kruskal_test(emb_ave ~ condition)
# res.kruskal
#
# tlx_df %>% kruskal_effsize(emb_ave ~ condition)
