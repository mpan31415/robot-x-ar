)
pwc
# ##### kruskal-wallis test
# res.kruskal <- form_df %>% kruskal_test(tlx_ave ~ condition)
# res.kruskal
#
# form_df %>% kruskal_effsize(tlx_ave ~ condition)
############ learning effect - check difference between all trial 1 and trial 2 ############
############ using paired sample t-test ############
res <- t.test(average_mt ~ trial, data = task_df, paired = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
task_df <- read_csv("merged_performance_data.csv")
task_df$trial <- as_factor(task_df$trial)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(condition) %>%
get_summary_stats(average_mt, type = "mean_sd")
######################### get mean and sd (or se) #########################
task_df %>%
group_by(trial) %>%
get_summary_stats(average_mt, type = "mean_sd")
############ learning effect - check difference between all trial 1 and trial 2 ############
############ using paired sample t-test ############
res <- t.test(average_mt ~ trial, data = task_df, paired = TRUE)
res
############ ANOVA - move time against viz condition ############
res.aov <- task_df %>% anova_test(average_mt ~ condition)
res.aov
######################### Two-way mixed ANOVA test #########################
# res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
# get_anova_table(res.aov)
######################### SIG: Pairwise comparisons between trials for each condition #########################
pwc <- task_df %>%
group_by(condition) %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
######################### SIG: Pairwise comparisons between trials for each condition #########################
pwc <- task_df %>%
group_by(condition) %>%
t.test(average_mt ~ trial, data = task_df, paired = TRUE)
############ learning effect - check difference between all trial 1 and trial 2 ############
############ using paired sample t-test ############
res <- t.test(average_mt ~ trial, data = task_df, paired = TRUE, adjust_pvalue(method="holm"))
############ learning effect - check difference between all trial 1 and trial 2 ############
############ using paired sample t-test ############
res <- t.test(average_mt ~ trial, data = task_df, paired = TRUE)
res
############ ANOVA - move time against viz condition ############
res.aov <- task_df %>% anova_test(average_mt ~ condition)
res.aov
######################### Two-way mixed ANOVA test #########################
# res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
# get_anova_table(res.aov)
######################### SIG: Pairwise comparisons between trials for each condition #########################
pwc <- task_df %>%
group_by(condition) %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ######################### SIG: Pairwise comparisons between trials for each condition #########################
# pwc <- task_df %>%
#   group_by(condition) %>%
#   t.test(average_mt ~ trial, data = task_df, paired = TRUE)
# pwc
######################### NON-SIG: Pairwise comparisons between conditions for each trial #########################
# pwc <- task_df %>%
#   group_by(trial) %>%
#   pairwise_t_test(
#     average_mt ~ condition, paired = TRUE,
#     p.adjust.method = "holm"
#     )
# pwc
# ###### kruskal-wallis test ######
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
task_df <- read_csv("merged_performance_data.csv")
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
task_df <- read_csv("merged_performance_data.csv")
task_df$trial <- as_factor(task_df$trial)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(condition) %>%
get_summary_stats(average_mt, type = "mean_sd")
######################### get mean and sd (or se) #########################
task_df %>%
group_by(trial) %>%
get_summary_stats(average_mt, type = "mean_sd")
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
task_df <- read_csv("merged_performance_data.csv")
task_df$trial <- as_factor(task_df$trial)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(condition) %>%
get_summary_stats(average_mt, type = "mean_sd")
######################### get mean and sd (or se) #########################
task_df %>%
group_by(trial) %>%
get_summary_stats(average_mt, type = "mean_sd")
######################### get mean and sd (or se) #########################
task_df %>%
group_by(condition) %>%
group_by(trial) %>%
get_summary_stats(average_mt, type = "mean_sd")
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
task_df <- read_csv("merged_performance_data.csv")
task_df$trial <- as_factor(task_df$trial)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(condition) %>%
get_summary_stats(average_mt, type = "mean_sd")
######################### get mean and sd (or se) #########################
task_df %>%
group_by(trial) %>%
get_summary_stats(average_mt, type = "mean_sd")
######################### get mean and sd (or se) #########################
task_df %>%
group_by(condition, trial) %>%
get_summary_stats(average_mt, type = "mean_sd")
knitr::opts_chunk$set(echo = TRUE)
############ ANOVA - move time against viz condition ############
res.aov <- task_df %>% anova_test(average_mt ~ condition)
res.aov
######################### NON-SIG: Pairwise comparisons between conditions for each trial #########################
# pwc <- task_df %>%
#   group_by(trial) %>%
#   pairwise_t_test(
#     average_mt ~ condition, paired = TRUE,
#     p.adjust.method = "holm"
#     )
# pwc
# ###### kruskal-wallis test ######
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
task_df <- read_csv("half_performance_data.csv")
######################### get mean and sd (or se) #########################
task_df %>%
group_by(condition) %>%
get_summary_stats(average_mt, type = "mean_sd")
############ ANOVA - move time against viz condition ############
res.aov <- task_df %>% anova_test(average_mt ~ condition)
res.aov
######################### NON-SIG: Pairwise comparisons between conditions for each trial #########################
# pwc <- task_df %>%
#   group_by(trial) %>%
#   pairwise_t_test(
#     average_mt ~ condition, paired = TRUE,
#     p.adjust.method = "holm"
#     )
# pwc
# ###### kruskal-wallis test ######
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
############ ANOVA - move time against viz condition ############
res.aov <- task_df %>% anova_test(average_mt ~ condition)
res.aov
######################### NON-SIG: Pairwise comparisons between conditions for each trial #########################
# pwc <- task_df %>%
#   group_by(trial) %>%
#   pairwise_t_test(
#     average_mt ~ condition, paired = TRUE,
#     p.adjust.method = "holm"
#     )
# pwc
# ###### kruskal-wallis test ######
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
form_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
form_df %>%
group_by(condition) %>%
get_summary_stats(tlx_ave, type = "mean_sd")
tlx_dims_df <- data.frame(form_df$tlx_mental, form_df$tlx_physical, form_df$tlx_hurried,
form_df$tlx_successful, form_df$tlx_hard, form_df$tlx_insecure)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
cronbach.alpha(tlx_dims_df, CI=TRUE)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = form_df, dv = tlx_ave, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- form_df %>%
pairwise_t_test(
tlx_ave ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ##### kruskal-wallis test
# res.kruskal <- form_df %>% kruskal_test(tlx_ave ~ condition)
# res.kruskal
#
# form_df %>% kruskal_effsize(tlx_ave ~ condition)
View(task_df)
View(task_df)
View(form_df)
View(form_df)
######################### mental #########################
res.aov <- anova_test(data = form_df, dv = tlx_mental, wid = pid, within = condition)
get_anova_table(res.aov)
######################### mental #########################
res.aov <- anova_test(data = form_df, dv = tlx_mental, wid = pid, within = condition)
get_anova_table(res.aov)
######################### physical #########################
res.aov <- anova_test(data = form_df, dv = tlx_physical, wid = pid, within = condition)
get_anova_table(res.aov)
######################### mental #########################
res.aov <- anova_test(data = form_df, dv = tlx_mental, wid = pid, within = condition)
get_anova_table(res.aov)
######################### physical #########################
res.aov <- anova_test(data = form_df, dv = tlx_physical, wid = pid, within = condition)
get_anova_table(res.aov)
######################### hurried #########################
res.aov <- anova_test(data = form_df, dv = tlx_hurried, wid = pid, within = condition)
get_anova_table(res.aov)
######################### successful #########################
res.aov <- anova_test(data = form_df, dv = tlx_successful, wid = pid, within = condition)
get_anova_table(res.aov)
######################### hard #########################
res.aov <- anova_test(data = form_df, dv = tlx_hard, wid = pid, within = condition)
get_anova_table(res.aov)
######################### insecure #########################
res.aov <- anova_test(data = form_df, dv = tlx_insecure, wid = pid, within = condition)
get_anova_table(res.aov)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
form_df <- read_csv("merged_form_data.csv")
######################### get mean and sd (or se) #########################
form_df %>%
group_by(condition) %>%
get_summary_stats(emb_ave, type = "mean_sd")
emb_dims_df <- data.frame(form_df$emb_1, form_df$emb_2, form_df$emb_3,
form_df$emb_4, form_df$emb_5, form_df$emb_6)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
cronbach.alpha(emb_dims_df, CI=TRUE)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = form_df, dv = owner_ave, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- form_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(owner_ave ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = form_df, dv = owner_ave, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- form_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
##### kruskal-wallis test
res.kruskal <- form_df %>% kruskal_test(owner_ave ~ condition)
res.kruskal
form_df %>% kruskal_effsize(owner_ave ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = form_df, dv = agency_ave, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- form_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
##### kruskal-wallis test
res.kruskal <- form_df %>% kruskal_test(agency_ave ~ condition)
res.kruskal
form_df %>% kruskal_effsize(agency_ave ~ condition)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
form_df <- read_csv("merged_form_data.csv")
# auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
# fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id1", "med_fitts_id2", "high_fitts_id")  # Replace these with your actual level names
#
# # Reorder the factor levels of "auto_level" according to levels_order
# task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
#
# # Reorder the factor levels of "fitts_id_level" according to levels_order
# task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### scatterplot #########################
p <- ggscatter(form_df, x = "tlx_ave", y = "difficulty",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Averaged NAXA-TLX", ylab = "Single-Scale Easiness"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(form_df$tlx_ave, form_df$difficulty,
method = "pearson")
res
######################### scatterplot #########################
p <- ggscatter(form_df, x = "tlx_ave", y = "difficulty",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Averaged NAXA-TLX", ylab = "Single-Scale Difficulty"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(form_df$tlx_ave, form_df$difficulty,
method = "pearson")
res
############ learning effect - check difference between all trial 1 and trial 2 ############
############ using paired sample t-test ############
res <- t.test(average_mt ~ trial, data = task_df, paired = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/")
task_df <- read_csv("merged_performance_data.csv")
task_df$trial <- as_factor(task_df$trial)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(condition) %>%
get_summary_stats(average_mt, type = "mean_sd")
######################### get mean and sd (or se) #########################
task_df %>%
group_by(trial) %>%
get_summary_stats(average_mt, type = "mean_sd")
######################### get mean and sd (or se) #########################
task_df %>%
group_by(condition, trial) %>%
get_summary_stats(average_mt, type = "mean_sd")
############ learning effect - check difference between all trial 1 and trial 2 ############
############ using paired sample t-test ############
res <- t.test(average_mt ~ trial, data = task_df, paired = TRUE)
res
############ ANOVA - move time against viz condition ############
res.aov <- task_df %>% anova_test(average_mt ~ condition, wid=pid)
res.aov
######################### Two-way mixed ANOVA test #########################
# res.aov <- anova_test(data = task_df, dv = average_mt, wid = pid, within = c(condition, trial))
# get_anova_table(res.aov)
######################### SIG: Pairwise comparisons between trials for each condition #########################
pwc <- task_df %>%
group_by(condition) %>%
pairwise_t_test(
average_mt ~ trial, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ######################### SIG: Pairwise comparisons between trials for each condition #########################
# pwc <- task_df %>%
#   group_by(condition) %>%
#   t.test(average_mt ~ trial, data = task_df, paired = TRUE)
# pwc
######################### NON-SIG: Pairwise comparisons between conditions for each trial #########################
# pwc <- task_df %>%
#   group_by(trial) %>%
#   pairwise_t_test(
#     average_mt ~ condition, paired = TRUE,
#     p.adjust.method = "holm"
#     )
# pwc
# ###### kruskal-wallis test ######
# res.kruskal <- task_df %>% kruskal_test(average_mt ~ condition)
# res.kruskal
#
# task_df %>% kruskal_effsize(average_mt ~ condition)
knitr::opts_chunk$set(echo = TRUE)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = rank_df, dv = ranking, wid = pid, within = condition)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/questionnaire/")
rank_df <- read_csv("vis_ranking.csv")
######################### get mean and sd (or se) #########################
rank_df %>%
group_by(condition) %>%
get_summary_stats(ranking, type = "mean_sd")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = rank_df, dv = ranking, wid = pid, within = condition)
get_anova_table(res.aov)
res.aov <- rank_df %>% anova_test(ranking ~ condition, wid=pid)
res.aov
# Compute the analysis of variance
res.aov <- aov(ranking ~ condition, data = rank_df)
# Summary of the analysis
summary(res.aov)
# TukeyHSD(res.aov)
res <- pairwise.t.test(rank_df$ranking, rank_df$condition,
p.adjust.method = "holm")
res
######################### SIG: Pairwise comparisons between trials for each condition #########################
pwc <- rank_df %>%
pairwise_t_test(
ranking ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ###### kruskal-wallis test ######
# res.kruskal <- rank_df %>% kruskal_test(ranking ~ condition)
# res.kruskal
#
# rank_df %>% kruskal_effsize(ranking ~ condition)
# ######################### Two-way mixed ANOVA test #########################
# res.aov <- anova_test(data = rank_df, dv = ranking, wid = pid, within = condition)
# get_anova_table(res.aov)
res.aov <- rank_df %>% anova_test(ranking ~ condition, wid=pid)
res.aov
# Compute the analysis of variance
res.aov <- aov(ranking ~ condition, data = rank_df)
# Summary of the analysis
summary(res.aov)
# TukeyHSD(res.aov)
res <- pairwise.t.test(rank_df$ranking, rank_df$condition,
p.adjust.method = "holm")
res
######################### SIG: Pairwise comparisons between trials for each condition #########################
pwc <- rank_df %>%
pairwise_t_test(
ranking ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ###### kruskal-wallis test ######
# res.kruskal <- rank_df %>% kruskal_test(ranking ~ condition)
# res.kruskal
#
# rank_df %>% kruskal_effsize(ranking ~ condition)
# ######################### Two-way mixed ANOVA test #########################
# res.aov <- anova_test(data = rank_df, dv = ranking, wid = pid, within = condition)
# get_anova_table(res.aov)
res.aov <- rank_df %>% anova_test(ranking ~ condition, wid=pid)
res.aov
# # Compute the analysis of variance
# res.aov <- aov(ranking ~ condition, data = rank_df)
# # Summary of the analysis
# summary(res.aov)
# TukeyHSD(res.aov)
res <- pairwise.t.test(rank_df$ranking, rank_df$condition,
p.adjust.method = "holm")
res
######################### SIG: Pairwise comparisons between trials for each condition #########################
pwc <- rank_df %>%
pairwise_t_test(
ranking ~ condition, paired = TRUE,
p.adjust.method = "holm"
)
pwc
# ###### kruskal-wallis test ######
# res.kruskal <- rank_df %>% kruskal_test(ranking ~ condition)
# res.kruskal
#
# rank_df %>% kruskal_effsize(ranking ~ condition)
