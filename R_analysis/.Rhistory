# plot.median <- function(x) {
#   m <- mean(x)
#   c(y = m, ymin = m, ymax = m)
# }
#
# ######################### cool dot plot 2 #########################
# p <- ggplot(tlx_df,aes(x=order,y=difficulty, fill=order)) + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=0.6) +
#                     labs( x = "Order", y = "NASA-TLX", fill = "Order") + theme_minimal() +
# stat_summary(fun.y = mean, geom="crossbar", colour="red", width=0.5, size=0.5) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 18, face = "bold"),
#         axis.title.y = element_text(size = 18, face = "bold"),
#         axis.text = element_text(size = 18),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy, ) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 18), legend.position = "none")
#
# p
#
# ggexport(p, filename = "pdfs/tlx.pdf")
bxp <- ggboxplot(tlx_df, x = "condition", y = "difficulty", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "tlx.png")
# ######################### cool box plot (courtesy of Sarah) #########################
# ggplot(tlx_df,aes(x=order,y=difficulty, fill=order))+geom_boxplot(aes(fill=order)) + labs( x = "Order", y = "difficulty", fill = "Order") +   theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
# axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
#
#
# ######################### cool dot plot #########################
# ggplot(tlx_df,aes(x=order,y=difficulty, fill=order)) + geom_boxplot() + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=1.2) +
#                     labs( x = "Order", y = "difficulty", fill = "Order") + theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
#         axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
# ## define custom median function
# plot.median <- function(x) {
#   m <- median(x)
#   c(y = m, ymin = m, ymax = m)
# }
#
# ## define custom mean function
# plot.median <- function(x) {
#   m <- mean(x)
#   c(y = m, ymin = m, ymax = m)
# }
#
# ######################### cool dot plot 2 #########################
# p <- ggplot(tlx_df,aes(x=order,y=difficulty, fill=order)) + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=0.6) +
#                     labs( x = "Order", y = "NASA-TLX", fill = "Order") + theme_minimal() +
# stat_summary(fun.y = mean, geom="crossbar", colour="red", width=0.5, size=0.5) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 18, face = "bold"),
#         axis.title.y = element_text(size = 18, face = "bold"),
#         axis.text = element_text(size = 18),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy, ) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 18), legend.position = "none")
#
# p
#
# ggexport(p, filename = "pdfs/tlx.pdf")
bxp <- ggboxplot(tlx_df, x = "condition", y = "difficulty", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "difficulty.png")
# ######################### cool box plot (courtesy of Sarah) #########################
# ggplot(tlx_df,aes(x=order,y=tlx_ave, fill=order))+geom_boxplot(aes(fill=order)) + labs( x = "Order", y = "tlx_ave", fill = "Order") +   theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
# axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
#
#
# ######################### cool dot plot #########################
# ggplot(tlx_df,aes(x=order,y=tlx_ave, fill=order)) + geom_boxplot() + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=1.2) +
#                     labs( x = "Order", y = "tlx_ave", fill = "Order") + theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
#         axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
# ## define custom median function
# plot.median <- function(x) {
#   m <- median(x)
#   c(y = m, ymin = m, ymax = m)
# }
#
# ## define custom mean function
# plot.median <- function(x) {
#   m <- mean(x)
#   c(y = m, ymin = m, ymax = m)
# }
#
# ######################### cool dot plot 2 #########################
# p <- ggplot(tlx_df,aes(x=order,y=tlx_ave, fill=order)) + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=0.6) +
#                     labs( x = "Order", y = "NASA-TLX", fill = "Order") + theme_minimal() +
# stat_summary(fun.y = mean, geom="crossbar", colour="red", width=0.5, size=0.5) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 18, face = "bold"),
#         axis.title.y = element_text(size = 18, face = "bold"),
#         axis.text = element_text(size = 18),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy, ) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 18), legend.position = "none")
#
# p
#
# ggexport(p, filename = "pdfs/tlx.pdf")
bxp <- ggboxplot(tlx_df, x = "condition", y = "tlx_ave", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "tlx.png")
tlx_df %>%
ggplot( aes(x=condition, y=tlx_ave)) +
geom_line() +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
# library(rcompanion)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/questionnaire/")
tlx_df <- read_csv("main_form_cleaned.csv")
######################### get mean and sd (or se) #########################
tlx_df %>%
group_by(condition) %>%
get_summary_stats(tlx_ave, type = "mean_sd")
tlx_dims_df <- data.frame(tlx_df$tlx_mental, tlx_df$tlx_physical, tlx_df$tlx_hurried,
tlx_df$tlx_successful, tlx_df$tlx_hard, tlx_df$tlx_insecure)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
cronbach.alpha(tlx_dims_df, CI=TRUE)
### tlx_mental ###
bxp <- ggboxplot(tlx_df, x = "condition", y = "tlx_mental", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "tlx_mental.png")
### tlx_physical ###
bxp <- ggboxplot(tlx_df, x = "condition", y = "tlx_physical", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "tlx_physical.png")
### tlx_hurried ###
bxp <- ggboxplot(tlx_df, x = "condition", y = "tlx_hurried", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "tlx_hurried.png")
### tlx_successful ###
bxp <- ggboxplot(tlx_df, x = "condition", y = "tlx_successful", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "tlx_successful.png")
### tlx_hard ###
bxp <- ggboxplot(tlx_df, x = "condition", y = "tlx_hard", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "tlx_hard.png")
### tlx_insecure ###
bxp <- ggboxplot(tlx_df, x = "condition", y = "tlx_insecure", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "tlx_insecure.png")
### tlx_average ###
bxp <- ggboxplot(tlx_df, x = "condition", y = "tlx_ave", add = "point", order=c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "tlx_ave.png")
# tlx_df %>%
#   ggplot( aes(x=condition, y=tlx_ave)) +
#     geom_line() +
#     geom_point()
######################### check for outliers #########################
tlx_df %>%
group_by(condition) %>%
identify_outliers(tlx_ave)
######################### check normality #########################
tlx_df %>%
group_by(condition) %>%
shapiro_test(tlx_ave)
ggqqplot(tlx_df, "tlx_ave", facet.by = "condition")
###### tlx_mental ######
res.aov <- anova_test(data = tlx_df, dv = tlx_mental, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- tlx_df %>%
pairwise_t_test(
tlx_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(tlx_mental ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(tlx_mental ~ condition)
###### tlx_physical ######
res.aov <- anova_test(data = tlx_df, dv = tlx_physical, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- tlx_df %>%
pairwise_t_test(
tlx_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(tlx_physical ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(tlx_physical ~ condition)
###### tlx_hurried ######
res.aov <- anova_test(data = tlx_df, dv = tlx_hurried, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- tlx_df %>%
pairwise_t_test(
tlx_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(tlx_hurried ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(tlx_hurried ~ condition)
###### tlx_successful ######
res.aov <- anova_test(data = tlx_df, dv = tlx_successful, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- tlx_df %>%
pairwise_t_test(
tlx_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(tlx_ave ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(tlx_ave ~ condition)
###### tlx_successful ######
res.aov <- anova_test(data = tlx_df, dv = tlx_successful, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- tlx_df %>%
pairwise_t_test(
tlx_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(tlx_successful ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(tlx_successful ~ condition)
###### tlx_hard ######
res.aov <- anova_test(data = tlx_df, dv = tlx_hard, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- tlx_df %>%
pairwise_t_test(
tlx_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(tlx_hard ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(tlx_hard ~ condition)
###### tlx_insecure ######
res.aov <- anova_test(data = tlx_df, dv = tlx_insecure, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- tlx_df %>%
pairwise_t_test(
tlx_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(tlx_insecure ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(tlx_insecure ~ condition)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/robot-x-ar/data/questionnaire/")
emb_df <- read_csv("main_form_cleaned.csv")
######################### get mean and sd (or se) #########################
emb_df %>%
group_by(condition) %>%
get_summary_stats(emb_ave, type = "mean_sd")
emb_dims_df <- data.frame(emb_df$emb1, emb_df$emb2, emb_df$emb3,
emb_df$emb4, emb_df$emb5, emb_df$emb6)
######################### calculate Cronbach's Alpha with 95% confidence interval #########################
# cronbach.alpha(emb_dims_df, CI=TRUE)
###### embodiment 1 ######
bxp <- ggboxplot(emb_df, x = "condition", y = "emb_1", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment1.png")
###### embodiment 2 ######
bxp <- ggboxplot(emb_df, x = "condition", y = "emb_2", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment2.png")
###### embodiment 3 ######
bxp <- ggboxplot(emb_df, x = "condition", y = "emb_3", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment3.png")
###### embodiment 4 ######
bxp <- ggboxplot(emb_df, x = "condition", y = "emb_4", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment4.png")
###### embodiment 5 ######
bxp <- ggboxplot(emb_df, x = "condition", y = "emb_5", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment5.png")
###### embodiment 6 ######
bxp <- ggboxplot(emb_df, x = "condition", y = "emb_6", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment6.png")
###### ownership average ######
bxp <- ggboxplot(emb_df, x = "condition", y = "owner_ave", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "ownership.png")
###### agency average ######
bxp <- ggboxplot(emb_df, x = "condition", y = "agency_ave", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "agency.png")
###### embodiment average ######
bxp <- ggboxplot(emb_df, x = "condition", y = "emb_ave", add = "point", order = c("A", "B", "C", "D"))
bxp
ggexport(bxp, filename = "embodiment_ave.png")
######################### check for outliers #########################
emb_df %>%
group_by(condition) %>%
identify_outliers(emb_ave)
######################### check normality #########################
emb_df %>%
group_by(condition) %>%
shapiro_test(emb_ave)
ggqqplot(emb_df, "emb_ave", facet.by = "condition")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = emb_df, dv = emb_1, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- emb_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(emb_1 ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(emb_1 ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = emb_df, dv = emb_2, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- emb_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(emb_2 ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(emb_2 ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = emb_df, dv = emb_3, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- emb_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(emb_3 ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(emb_3 ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = emb_df, dv = emb_4, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- emb_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(emb_4 ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(emb_4 ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = emb_df, dv = emb_5, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- emb_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(emb_5 ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(emb_5 ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = emb_df, dv = emb_6, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- emb_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(emb_6 ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(emb_6 ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = emb_df, dv = owner_ave, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- emb_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(owner_ave ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(owner_ave ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = emb_df, dv = agency_ave, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- emb_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(agency_ave ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(agency_ave ~ condition)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(data = emb_df, dv = emb_ave, wid = pid, within = condition)
get_anova_table(res.aov)
# pairwise comparisons
pwc <- emb_df %>%
pairwise_t_test(
emb_ave ~ condition, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
##### kruskal-wallis test
res.kruskal <- tlx_df %>% kruskal_test(emb_ave ~ condition)
res.kruskal
tlx_df %>% kruskal_effsize(emb_ave ~ condition)
